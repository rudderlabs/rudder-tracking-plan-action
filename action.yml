name: "Rudderstack Tracking Plan Manager"
description: "Validate and manage Rudderstack tracking plans through GitHub Actions"

branding:
  icon: activity
  color: purple

inputs:
  location:
    description: "Path to the folder containing tracking plan files"
    required: true
  mode:
    description: "Operation mode. Must be one of: 'validate', 'dry-run', or 'apply'"
    required: true
  cli_version:
    description: "Version of rudder-cli to use"
    required: false
    default: "v0.8.0"

runs:
  using: "composite"
  steps:
    - name: Cache Rudder CLI
      id: cache-rudder-cli
      uses: actions/cache@v4
      with:
        path: ~/.local/bin/rudder-cli
        key: rudder-cli-${{ inputs.cli_version }}-Linux-x86_64

    - name: Download Rudder CLI
      if: steps.cache-rudder-cli.outputs.cache-hit != 'true'
      shell: bash
      run: |
        # Validate minimum CLI version
        required_version="0.3.0"
        input_version="${{ inputs.cli_version }}"
        input_version="${input_version#v}" # Remove 'v' prefix if present

        if ! printf '%s\n' "$required_version" "$input_version" | sort -V -C; then
          echo "::error::CLI version must be at least v${required_version}. Got: ${{ inputs.cli_version }}"
          exit 1
        fi

        echo "Downloading Rudder CLI ${{ inputs.cli_version }}..."
        
        # Create cache directory
        mkdir -p ~/.local/bin
        
        # Download and extract directly to cache location (using x86_64)
        DOWNLOAD_URL="https://github.com/rudderlabs/rudder-iac/releases/download/${{ inputs.cli_version }}/rudder-cli_Linux_x86_64.tar.gz"
        echo "Downloading from: $DOWNLOAD_URL"
        
        if ! curl -L "$DOWNLOAD_URL" | tar -xz -C ~/.local/bin rudder-cli; then
          echo "::error::Failed to download or extract Rudder CLI"
          exit 1
        fi
        
        if [ ! -f ~/.local/bin/rudder-cli ]; then
          echo "::error::Rudder CLI binary not found after extraction"
          exit 1
        fi
        
        chmod +x ~/.local/bin/rudder-cli
        
        # Verify the binary works
        if ! ~/.local/bin/rudder-cli --version >/dev/null 2>&1; then
          echo "::error::Downloaded Rudder CLI binary is not executable or corrupted"
          exit 1
        fi
        
        echo "Rudder CLI downloaded and cached successfully"

    - name: Install Rudder CLI
      shell: bash
      run: |
        echo "Cache hit status: ${{ steps.cache-rudder-cli.outputs.cache-hit }}"
        echo "Checking for Rudder CLI at: $HOME/.local/bin/rudder-cli"
        
        if [ -f "$HOME/.local/bin/rudder-cli" ]; then
          echo "Installing Rudder CLI from cache..."
          sudo cp "$HOME/.local/bin/rudder-cli" /usr/local/bin/rudder-cli
          sudo chmod +x /usr/local/bin/rudder-cli
          echo "Rudder CLI installed successfully"
        fi
        echo "::error::Rudder CLI binary not found in cache location: $HOME/.local/bin/rudder-cli"
        echo "Directory contents:"
        ls -la "$HOME/.local/bin/" || echo "Directory does not exist"
        echo "Full ~/.local directory structure:"
        find "$HOME/.local" -type f -name "*rudder*" 2>/dev/null || echo "No rudder files found"
        
        # Verify installation
        echo "Verifying Rudder CLI installation..."
        rudder-cli --version

    - name: Verify environment
      shell: bash
      run: |
        if [ -z "$RUDDERSTACK_ACCESS_TOKEN" ]; then
          echo "::error::RUDDERSTACK_ACCESS_TOKEN environment variable is not set. Please set it using repository secrets."
          exit 1
        fi

        # Validate mode input
        if [[ "${{ inputs.mode }}" != "validate" && "${{ inputs.mode }}" != "dry-run" && "${{ inputs.mode }}" != "apply" ]]; then
          echo "::error::Invalid mode: ${{ inputs.mode }}. Mode must be one of: validate, dry-run, apply"
          exit 1
        fi

    - name: Validate tracking plans
      if: inputs.mode == 'validate'
      shell: bash
      run: |
        rudder-cli tp validate -l ${{ inputs.location }}

    - name: Perform dry run
      if: inputs.mode == 'dry-run'
      shell: bash
      run: |
        rudder-cli tp apply -l ${{ inputs.location }} --dry-run

    - name: Apply tracking plans
      if: inputs.mode == 'apply'
      shell: bash
      run: |
        rudder-cli tp apply -l ${{ inputs.location }} --confirm=false
